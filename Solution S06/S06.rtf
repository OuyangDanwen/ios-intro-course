{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green0\blue0;\red43\green131\blue159;
\red163\green21\blue21;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c16900\c51200\c62500;
\csgenericrgb\c63900\c8200\c8200;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab692
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \CocoaLigature0 enum\cf3  MealType \{\
    \cf2 case\cf3  salads, fireHydrants, cookies\
\}\
\
\cf2 enum\cf3  MealError: \cf4 Error\cf3  \{\
    \cf2 case\cf3  emptyMeals\
\}\
\
\cf2 class\cf3  CookieMonster \{\
    \cf2 var\cf3  name: \cf4 String\cf3 \
    \cf2 var\cf3  meals = \cf4 Stack\cf3 <\cf4 Eatable\cf3 >()\
    \
    \cf2 init\cf3 (name: \cf4 String\cf3 ) \{\
        \cf2 self\cf3 .\cf4 name\cf3  = name\
    \}\
    \
    \cf2 func\cf3  takeFood(meal: \cf4 Eatable\cf3 ) \{\
        \cf4 meals\cf3 .\cf4 push\cf3 (meal)\
    \}\
    \
    \cf2 func\cf3  eatFood() \cf2 throws\cf3  \{\
        \cf2 if\cf3  (\cf4 meals\cf3 .\cf4 count\cf3 () == 0) \{\
            \cf2 throw\cf3  \cf4 MealError\cf3 .\cf4 emptyMeals\cf3 \
        \}\
        \
        \cf2 var\cf3  totalCalories = 0\
        \
        \cf2 while\cf3  \cf4 meals\cf3 .\cf4 count\cf3 () > 0 \{\
            \cf2 let\cf3  meal = \cf2 self\cf3 .\cf4 meals\cf3 .\cf4 pop\cf3 ()\
            totalCalories += meal.\cf4 calories\cf3 \
            \cf4 print\cf3 (\cf5 "Yummy, \cf3 \\\cf5 (\cf3 meal.\cf4 name\cf5 )!"\cf3 )\
        \}\
        \
        \cf4 print\cf3 (\cf5 "Total calories are \cf3 \\\cf5 (\cf3 totalCalories\cf5 )."\cf3 )\
    \}\
\}\
\
\cf2 struct\cf3  Meal: \cf4 Eatable\cf3  \{\
    \cf2 var\cf3  name: \cf4 MealType\cf3 \
    \cf2 var\cf3  calories: \cf4 Int\cf3 \
    \
    \cf2 init\cf3 (name: \cf4 MealType\cf3 , calories: \cf4 Int\cf3 ) \{\
        \cf2 self\cf3 .\cf4 name\cf3  = name\
        \cf2 self\cf3 .\cf4 calories\cf3  = calories\
    \}\
\}\
\
\cf2 struct\cf3  Stack<Element> \{\
    \cf2 var\cf3  items = [\cf4 Element\cf3 ]()\
    \
    \cf2 mutating\cf3  \cf2 func\cf3  push(\cf2 _\cf3  item: \cf4 Element\cf3 ) \{\
        \cf4 items\cf3 .\cf4 append\cf3 (item)\
    \}\
    \
    \cf2 mutating\cf3  \cf2 func\cf3  pop() -> \cf4 Element\cf3  \{\
        \cf2 return\cf3  \cf4 items\cf3 .\cf4 removeLast\cf3 ()\
    \}\
    \
    \cf2 mutating\cf3  \cf2 func\cf3  count() -> \cf4 Int\cf3  \{\
        \cf2 return\cf3  \cf4 items\cf3 .\cf4 count\cf3 \
    \}\
\}\
\
\cf2 protocol\cf3  Eatable \{\
    \cf2 var\cf3  name: \cf4 MealType\cf3  \{ \cf2 get\cf3  \cf2 set\cf3  \}\
    \cf2 var\cf3  calories: \cf4 Int\cf3  \{ \cf2 get\cf3  \cf2 set\cf3  \}\
\}\
\
\cf2 let\cf3  cookieMonster = \cf4 CookieMonster\cf3 .\cf2 init\cf3 (name: \cf5 "Tony"\cf3 )\
\
\cf4 cookieMonster\cf3 .\cf4 takeFood\cf3 (meal: \cf4 Meal\cf3 .\cf2 init\cf3 (name: \cf4 MealType\cf3 .\cf4 fireHydrants\cf3 , calories: 200))\
\cf4 cookieMonster\cf3 .\cf4 takeFood\cf3 (meal: \cf4 Meal\cf3 .\cf2 init\cf3 (name: \cf4 MealType\cf3 .\cf4 salads\cf3 , calories: 500))\
\cf4 cookieMonster\cf3 .\cf4 takeFood\cf3 (meal: \cf4 Meal\cf3 .\cf2 init\cf3 (name: \cf4 MealType\cf3 .\cf4 fireHydrants\cf3 , calories: 500))\
\cf4 cookieMonster\cf3 .\cf4 takeFood\cf3 (meal: \cf4 Meal\cf3 .\cf2 init\cf3 (name: \cf4 MealType\cf3 .\cf4 cookies\cf3 , calories: 300))\
\
\cf2 do\cf3  \{\
    \cf2 try\cf3  \cf4 cookieMonster\cf3 .\cf4 eatFood\cf3 ()\
\} \cf2 catch\cf3  MealError.\cf4 emptyMeals\cf3  \{\
    \cf4 print\cf3 (\cf5 "Cannot eat. No meals added yet!"\cf3 )\
\}\
\
}